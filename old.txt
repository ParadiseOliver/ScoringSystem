func index_handler(w http.ResponseWriter, r *http.Request) {

	var Users []User

	db, err := config.Connectdb()

	if err != nil {
		panic(err)
	}

	t, _ := template.ParseFiles("pages/index.html")

	result, err := db.Query("SELECT * FROM users")

	if err != nil {
		panic(err)
	}

	for result.Next() {

		var usr User

		if err = result.Scan(&usr.Id, &usr.FirstName, &usr.Surname, &usr.Club, &usr.User_type); err != nil {
			panic(err)
		}

		Users = append(Users, usr)

	}

	if err = t.Execute(w, Users); err != nil {
		panic(err)
	}
}

func events_page_handler(w http.ResponseWriter, r *http.Request) {

	var Events []Event

	db, err := config.Connectdb()

	if err != nil {
		panic(err)
	}

	t, _ := template.ParseFiles("pages/events.html")

	result, err := db.Query("SELECT * FROM events")

	if err != nil {
		panic(err)
	}

	for result.Next() {

		var event Event

		if err = result.Scan(&event.Id, &event.Name, &event.StartDate, &event.EndDate); err != nil {
			panic(err)
		}

		Events = append(Events, event)

	}

	if err = t.Execute(w, Events); err != nil {
		panic(err)
	}
}

func addEventHandler(w http.ResponseWriter, r *http.Request) {
	add := "Hi"
	t, _ := template.ParseFiles("pages/addEvent.html")

	if err := t.Execute(w, add); err != nil {
		panic(err)
	}
}

	r := mux.NewRouter()
	r.HandleFunc("/", index_handler).Methods("GET")
	r.HandleFunc("/events", events_page_handler).Methods("GET")
	r.HandleFunc("/addEvent", addEventHandler).Methods("GET")
	http.Handle("/", r)
	http.Handle("/events", r)
	http.Handle("/addEvent", r)
	log.Fatal(http.ListenAndServe(":8000", nil))